{"remainingRequest":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\src\\components\\vue-draggable-resizable.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\src\\components\\vue-draggable-resizable.vue","mtime":1566182429774},{"path":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"C:\\\\Users\\\\AAA\\\\Desktop\\\\drag-resize-forvue\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport _parseInt from \"C:\\\\Users\\\\AAA\\\\Desktop\\\\drag-resize-forvue\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-int\";\nimport _slicedToArray from \"C:\\\\Users\\\\AAA\\\\Desktop\\\\drag-resize-forvue\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.filter\";\nimport _Set from \"C:\\\\Users\\\\AAA\\\\Desktop\\\\drag-resize-forvue\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/set\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { matchesSelectorToParentElements, addEvent, removeEvent } from '../utils/dom';\nvar events = {\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup'\n  },\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend'\n  }\n};\nvar userSelectNone = {\n  userSelect: 'none',\n  MozUserSelect: 'none',\n  WebkitUserSelect: 'none',\n  MsUserSelect: 'none'\n};\nvar userSelectAuto = {\n  userSelect: 'auto',\n  MozUserSelect: 'auto',\n  WebkitUserSelect: 'auto',\n  MsUserSelect: 'auto'\n};\nvar eventsFor = events.mouse;\nexport default {\n  replace: true,\n  name: 'vue-draggable-resizable',\n  props: {\n    className: {\n      type: String,\n      default: 'vdr'\n    },\n    classNameDraggable: {\n      type: String,\n      default: 'draggable'\n    },\n    classNameResizable: {\n      type: String,\n      default: 'resizable'\n    },\n    classNameDragging: {\n      type: String,\n      default: 'dragging'\n    },\n    classNameResizing: {\n      type: String,\n      default: 'resizing'\n    },\n    classNameActive: {\n      type: String,\n      default: 'active'\n    },\n    classNameHandle: {\n      type: String,\n      default: 'handle'\n    },\n    disableUserSelect: {\n      type: Boolean,\n      default: true\n    },\n    enableNativeDrag: {\n      type: Boolean,\n      default: false\n    },\n    preventDeactivation: {\n      type: Boolean,\n      default: false\n    },\n    active: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: true\n    },\n    resizable: {\n      type: Boolean,\n      default: true\n    },\n    lockAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    w: {\n      type: Number,\n      default: 200,\n      validator: function validator(val) {\n        return val > 0;\n      }\n    },\n    h: {\n      type: Number,\n      default: 200,\n      validator: function validator(val) {\n        return val > 0;\n      }\n    },\n    minWidth: {\n      type: Number,\n      default: 0,\n      validator: function validator(val) {\n        return val >= 0;\n      }\n    },\n    minHeight: {\n      type: Number,\n      default: 0,\n      validator: function validator(val) {\n        return val >= 0;\n      }\n    },\n    maxWidth: {\n      type: Number,\n      default: null,\n      validator: function validator(val) {\n        return val >= 0;\n      }\n    },\n    maxHeight: {\n      type: Number,\n      default: null,\n      validator: function validator(val) {\n        return val >= 0;\n      }\n    },\n    x: {\n      type: Number,\n      default: 0,\n      validator: function validator(val) {\n        return typeof val === 'number';\n      }\n    },\n    y: {\n      type: Number,\n      default: 0,\n      validator: function validator(val) {\n        return typeof val === 'number';\n      }\n    },\n    z: {\n      type: [String, Number],\n      default: 'auto',\n      validator: function validator(val) {\n        return typeof val === 'string' ? val === 'auto' : val >= 0;\n      }\n    },\n    handles: {\n      type: Array,\n      default: function _default() {\n        return ['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml'];\n      },\n      validator: function validator(val) {\n        var s = new _Set(['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml']);\n        return new _Set(val.filter(function (h) {\n          return s.has(h);\n        })).size === val.length;\n      }\n    },\n    dragHandle: {\n      type: String,\n      default: null\n    },\n    dragCancel: {\n      type: String,\n      default: null\n    },\n    axis: {\n      type: String,\n      default: 'both',\n      validator: function validator(val) {\n        return ['x', 'y', 'both'].includes(val);\n      }\n    },\n    grid: {\n      type: Array,\n      default: function _default() {\n        return [1, 1];\n      }\n    },\n    parent: {\n      type: Boolean,\n      default: false\n    },\n    onDragStart: {\n      type: Function,\n      default: null\n    },\n    onResizeStart: {\n      type: Function,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      rawWidth: this.w,\n      rawHeight: this.h,\n      rawLeft: this.x,\n      rawTop: this.y,\n      rawRight: null,\n      rawBottom: null,\n      left: this.x,\n      top: this.y,\n      right: null,\n      bottom: null,\n      aspectFactor: this.w / this.h,\n      parentWidth: null,\n      parentHeight: null,\n      minW: this.minWidth,\n      minH: this.minHeight,\n      maxW: this.maxWidth,\n      maxH: this.maxHeight,\n      handle: null,\n      enabled: this.active,\n      resizing: false,\n      dragging: false,\n      zIndex: this.z\n    };\n  },\n  created: function created() {\n    // eslint-disable-next-line\n    if (this.maxWidth && this.minWidth > this.maxWidth) console.warn('[Vdr warn]: Invalid prop: minWidth cannot be greater than maxWidth'); // eslint-disable-next-line\n\n    if (this.maxWidth && this.minHeight > this.maxHeight) console.warn('[Vdr warn]: Invalid prop: minHeight cannot be greater than maxHeight');\n    this.resetBoundsAndMouseState();\n  },\n  mounted: function mounted() {\n    if (!this.enableNativeDrag) {\n      this.$el.ondragstart = function () {\n        return false;\n      };\n    }\n\n    var _this$getParentSize = this.getParentSize();\n\n    var _this$getParentSize2 = _slicedToArray(_this$getParentSize, 2);\n\n    this.parentWidth = _this$getParentSize2[0];\n    this.parentHeight = _this$getParentSize2[1];\n    this.rawRight = this.parentWidth - this.rawWidth - this.rawLeft;\n    this.rawBottom = this.parentHeight - this.rawHeight - this.rawTop;\n    addEvent(document.documentElement, 'mousedown', this.deselect);\n    addEvent(document.documentElement, 'touchend touchcancel', this.deselect);\n    addEvent(window, 'resize', this.checkParentSize);\n  },\n  beforeDestroy: function beforeDestroy() {\n    removeEvent(document.documentElement, 'mousedown', this.deselect);\n    removeEvent(document.documentElement, 'touchstart', this.handleUp);\n    removeEvent(document.documentElement, 'mousemove', this.move);\n    removeEvent(document.documentElement, 'touchmove', this.move);\n    removeEvent(document.documentElement, 'mouseup', this.handleUp);\n    removeEvent(document.documentElement, 'touchend touchcancel', this.deselect);\n    removeEvent(window, 'resize', this.checkParentSize);\n  },\n  methods: {\n    resetBoundsAndMouseState: function resetBoundsAndMouseState() {\n      this.mouseClickPosition = {\n        mouseX: 0,\n        mouseY: 0,\n        x: 0,\n        y: 0,\n        w: 0,\n        h: 0\n      };\n      this.bounds = {\n        minLeft: null,\n        maxLeft: null,\n        minRight: null,\n        maxRight: null,\n        minTop: null,\n        maxTop: null,\n        minBottom: null,\n        maxBottom: null\n      };\n    },\n    checkParentSize: function checkParentSize() {\n      if (this.parent) {\n        var _this$getParentSize3 = this.getParentSize(),\n            _this$getParentSize4 = _slicedToArray(_this$getParentSize3, 2),\n            newParentWidth = _this$getParentSize4[0],\n            newParentHeight = _this$getParentSize4[1];\n\n        var deltaX = this.parentWidth - newParentWidth;\n        var deltaY = this.parentHeight - newParentHeight;\n        this.rawRight -= deltaX;\n        this.rawBottom -= deltaY;\n        this.parentWidth = newParentWidth;\n        this.parentHeight = newParentHeight;\n      }\n    },\n    getParentSize: function getParentSize() {\n      if (this.parent) {\n        var style = window.getComputedStyle(this.$el.parentNode, null);\n        return [_parseInt(style.getPropertyValue('width'), 10), _parseInt(style.getPropertyValue('height'), 10)];\n      }\n\n      return [null, null];\n    },\n    elementTouchDown: function elementTouchDown(e) {\n      eventsFor = events.touch;\n      this.elementDown(e);\n    },\n    contextmenu: function contextmenu(e) {\n      this.$emit('onDelete');\n      e.preventDefault();\n    },\n    elementDown: function elementDown(e) {\n      if (e.button === 2) {\n        return;\n      }\n\n      var target = e.target || e.srcElement;\n\n      if (this.$el.contains(target)) {\n        if (this.onDragStart && this.onDragStart(e) === false) {\n          return;\n        }\n\n        if (this.dragHandle && !matchesSelectorToParentElements(target, this.dragHandle, this.$el) || this.dragCancel && matchesSelectorToParentElements(target, this.dragCancel, this.$el)) {\n          return;\n        }\n\n        if (!this.enabled) {\n          this.enabled = true;\n          this.$emit('activated');\n          this.$emit('update:active', true);\n        }\n\n        if (this.draggable) {\n          this.dragging = true;\n        }\n\n        this.mouseClickPosition.mouseX = e.touches ? e.touches[0].pageX : e.pageX;\n        this.mouseClickPosition.mouseY = e.touches ? e.touches[0].pageY : e.pageY;\n        this.mouseClickPosition.left = this.left;\n        this.mouseClickPosition.right = this.right;\n        this.mouseClickPosition.top = this.top;\n        this.mouseClickPosition.bottom = this.bottom;\n\n        if (this.parent) {\n          this.bounds = this.calcDragLimits();\n        }\n\n        addEvent(document.documentElement, eventsFor.move, this.move);\n        addEvent(document.documentElement, eventsFor.stop, this.handleUp);\n      }\n    },\n    calcDragLimits: function calcDragLimits() {\n      return {\n        minLeft: (this.parentWidth + this.left) % this.grid[0],\n        maxLeft: Math.floor((this.parentWidth - this.width - this.left) / this.grid[0]) * this.grid[0] + this.left,\n        minRight: (this.parentWidth + this.right) % this.grid[0],\n        maxRight: Math.floor((this.parentWidth - this.width - this.right) / this.grid[0]) * this.grid[0] + this.right,\n        minTop: (this.parentHeight + this.top) % this.grid[1],\n        maxTop: Math.floor((this.parentHeight - this.height - this.top) / this.grid[1]) * this.grid[1] + this.top,\n        minBottom: (this.parentHeight + this.bottom) % this.grid[1],\n        maxBottom: Math.floor((this.parentHeight - this.height - this.bottom) / this.grid[1]) * this.grid[1] + this.bottom\n      };\n    },\n    deselect: function deselect(e) {\n      var target = e.target || e.srcElement;\n      var regex = new RegExp(this.className + '-([trmbl]{2})', '');\n\n      if (!this.$el.contains(target) && !regex.test(target.className)) {\n        if (this.enabled && !this.preventDeactivation) {\n          this.enabled = false;\n          this.$emit('deactivated');\n          this.$emit('update:active', false);\n        }\n\n        removeEvent(document.documentElement, eventsFor.move, this.handleMove);\n      }\n\n      this.resetBoundsAndMouseState();\n    },\n    handleTouchDown: function handleTouchDown(handle, e) {\n      eventsFor = events.touch;\n      this.handleDown(handle, e);\n    },\n    handleDown: function handleDown(handle, e) {\n      if (this.onResizeStart && this.onResizeStart(handle, e) === false) {\n        return;\n      }\n\n      if (e.stopPropagation) e.stopPropagation(); // Here we avoid a dangerous recursion by faking\n      // corner handles as middle handles\n\n      if (this.lockAspectRatio && !handle.includes('m')) {\n        this.handle = 'm' + handle.substring(1);\n      } else {\n        this.handle = handle;\n      }\n\n      this.resizing = true;\n      this.mouseClickPosition.mouseX = e.touches ? e.touches[0].pageX : e.pageX;\n      this.mouseClickPosition.mouseY = e.touches ? e.touches[0].pageY : e.pageY;\n      this.mouseClickPosition.left = this.left;\n      this.mouseClickPosition.right = this.right;\n      this.mouseClickPosition.top = this.top;\n      this.mouseClickPosition.bottom = this.bottom;\n      this.bounds = this.calcResizeLimits();\n      addEvent(document.documentElement, eventsFor.move, this.handleMove);\n      addEvent(document.documentElement, eventsFor.stop, this.handleUp);\n    },\n    calcResizeLimits: function calcResizeLimits() {\n      var minW = this.minW;\n      var minH = this.minH;\n      var maxW = this.maxW;\n      var maxH = this.maxH;\n      var aspectFactor = this.aspectFactor;\n\n      var _this$grid = _slicedToArray(this.grid, 2),\n          gridX = _this$grid[0],\n          gridY = _this$grid[1];\n\n      var width = this.width;\n      var height = this.height;\n      var left = this.left;\n      var top = this.top;\n      var right = this.right;\n      var bottom = this.bottom;\n\n      if (this.lockAspectRatio) {\n        if (minW / minH > aspectFactor) {\n          minH = minW / aspectFactor;\n        } else {\n          minW = aspectFactor * minH;\n        }\n\n        if (maxW && maxH) {\n          maxW = Math.min(maxW, aspectFactor * maxH);\n          maxH = Math.min(maxH, maxW / aspectFactor);\n        } else if (maxW) {\n          maxH = maxW / aspectFactor;\n        } else if (maxH) {\n          maxW = aspectFactor * maxH;\n        }\n      }\n\n      maxW = maxW - maxW % gridX;\n      maxH = maxH - maxH % gridY;\n      var limits = {\n        minLeft: null,\n        maxLeft: null,\n        minTop: null,\n        maxTop: null,\n        minRight: null,\n        maxRight: null,\n        minBottom: null,\n        maxBottom: null\n      };\n\n      if (this.parent) {\n        limits.minLeft = (this.parentWidth + left) % gridX;\n        limits.maxLeft = left + Math.floor((width - minW) / gridX) * gridX;\n        limits.minTop = (this.parentHeight + top) % gridY;\n        limits.maxTop = top + Math.floor((height - minH) / gridY) * gridY;\n        limits.minRight = (this.parentWidth + right) % gridX;\n        limits.maxRight = right + Math.floor((width - minW) / gridX) * gridX;\n        limits.minBottom = (this.parentHeight + bottom) % gridY;\n        limits.maxBottom = bottom + Math.floor((height - minH) / gridY) * gridY;\n\n        if (maxW) {\n          limits.minLeft = Math.max(limits.minLeft, this.parentWidth - right - maxW);\n          limits.minRight = Math.max(limits.minRight, this.parentWidth - left - maxW);\n        }\n\n        if (maxH) {\n          limits.minTop = Math.max(limits.minTop, this.parentHeight - bottom - maxH);\n          limits.minBottom = Math.max(limits.minBottom, this.parentHeight - top - maxH);\n        }\n\n        if (this.lockAspectRatio) {\n          limits.minLeft = Math.max(limits.minLeft, left - top * aspectFactor);\n          limits.minTop = Math.max(limits.minTop, top - left / aspectFactor);\n          limits.minRight = Math.max(limits.minRight, right - bottom * aspectFactor);\n          limits.minBottom = Math.max(limits.minBottom, bottom - right / aspectFactor);\n        }\n      } else {\n        limits.minLeft = null;\n        limits.maxLeft = left + Math.floor((width - minW) / gridX) * gridX;\n        limits.minTop = null;\n        limits.maxTop = top + Math.floor((height - minH) / gridY) * gridY;\n        limits.minRight = null;\n        limits.maxRight = right + Math.floor((width - minW) / gridX) * gridX;\n        limits.minBottom = null;\n        limits.maxBottom = bottom + Math.floor((height - minH) / gridY) * gridY;\n\n        if (maxW) {\n          limits.minLeft = -(right + maxW);\n          limits.minRight = -(left + maxW);\n        }\n\n        if (maxH) {\n          limits.minTop = -(bottom + maxH);\n          limits.minBottom = -(top + maxH);\n        }\n\n        if (this.lockAspectRatio && maxW && maxH) {\n          limits.minLeft = Math.min(limits.minLeft, -(right + maxW));\n          limits.minTop = Math.min(limits.minTop, -(maxH + bottom));\n          limits.minRight = Math.min(limits.minRight, -left - maxW);\n          limits.minBottom = Math.min(limits.minBottom, -top - maxH);\n        }\n      }\n\n      return limits;\n    },\n    move: function move(e) {\n      if (this.resizing) {\n        this.handleMove(e);\n      } else if (this.dragging) {\n        this.elementMove(e);\n      }\n    },\n    elementMove: function elementMove(e) {\n      var axis = this.axis;\n      var grid = this.grid;\n      var mouseClickPosition = this.mouseClickPosition;\n      var tmpDeltaX = axis && axis !== 'y' ? mouseClickPosition.mouseX - (e.touches ? e.touches[0].pageX : e.pageX) : 0;\n      var tmpDeltaY = axis && axis !== 'x' ? mouseClickPosition.mouseY - (e.touches ? e.touches[0].pageY : e.pageY) : 0;\n\n      var _this$snapToGrid = this.snapToGrid(this.grid, tmpDeltaX, tmpDeltaY),\n          _this$snapToGrid2 = _slicedToArray(_this$snapToGrid, 2),\n          deltaX = _this$snapToGrid2[0],\n          deltaY = _this$snapToGrid2[1];\n\n      if (!deltaX && !deltaY) return;\n      this.rawTop = mouseClickPosition.top - deltaY;\n      this.rawBottom = mouseClickPosition.bottom + deltaY;\n      this.rawLeft = mouseClickPosition.left - deltaX;\n      this.rawRight = mouseClickPosition.right + deltaX;\n      this.$emit('dragging', this.left, this.top);\n    },\n    handleMove: function handleMove(e) {\n      var handle = this.handle;\n      var mouseClickPosition = this.mouseClickPosition;\n      var tmpDeltaX = mouseClickPosition.mouseX - (e.touches ? e.touches[0].pageX : e.pageX);\n      var tmpDeltaY = mouseClickPosition.mouseY - (e.touches ? e.touches[0].pageY : e.pageY);\n\n      var _this$snapToGrid3 = this.snapToGrid(this.grid, tmpDeltaX, tmpDeltaY),\n          _this$snapToGrid4 = _slicedToArray(_this$snapToGrid3, 2),\n          deltaX = _this$snapToGrid4[0],\n          deltaY = _this$snapToGrid4[1];\n\n      if (!deltaX && !deltaY) return;\n\n      if (handle.includes('b')) {\n        this.rawBottom = mouseClickPosition.bottom + deltaY;\n      } else if (handle.includes('t')) {\n        this.rawTop = mouseClickPosition.top - deltaY;\n      }\n\n      if (handle.includes('r')) {\n        this.rawRight = mouseClickPosition.right + deltaX;\n      } else if (handle.includes('l')) {\n        this.rawLeft = mouseClickPosition.left - deltaX;\n      }\n\n      this.$emit('resizing', this.left, this.top, this.width, this.height);\n    },\n    handleUp: function handleUp(e) {\n      this.handle = null;\n      this.resetBoundsAndMouseState();\n      this.rawTop = this.top;\n      this.rawBottom = this.bottom;\n      this.rawLeft = this.left;\n      this.rawRight = this.right;\n\n      if (this.resizing) {\n        this.resizing = false;\n        this.$emit('resizestop', this.left, this.top, this.width, this.height);\n      }\n\n      if (this.dragging) {\n        this.dragging = false;\n        this.$emit('dragstop', this.left, this.top);\n      }\n\n      removeEvent(document.documentElement, eventsFor.move, this.handleMove);\n    },\n    snapToGrid: function snapToGrid(grid, pendingX, pendingY) {\n      var x = Math.round(pendingX / grid[0]) * grid[0];\n      var y = Math.round(pendingY / grid[1]) * grid[1];\n      return [x, y];\n    }\n  },\n  computed: {\n    style: function style() {\n      return _objectSpread({\n        position: 'absolute',\n        top: this.top + 'px',\n        left: this.left + 'px',\n        width: this.width + 'px',\n        height: this.height + 'px',\n        zIndex: this.zIndex\n      }, this.dragging && this.disableUserSelect ? userSelectNone : userSelectAuto);\n    },\n    actualHandles: function actualHandles() {\n      if (!this.resizable) return [];\n      return this.handles;\n    },\n    width: function width() {\n      return this.parentWidth - this.left - this.right;\n    },\n    height: function height() {\n      return this.parentHeight - this.top - this.bottom;\n    },\n    resizingOnX: function resizingOnX() {\n      return Boolean(this.handle) && (this.handle.includes('l') || this.handle.includes('r'));\n    },\n    resizingOnY: function resizingOnY() {\n      return Boolean(this.handle) && (this.handle.includes('t') || this.handle.includes('b'));\n    },\n    isCornerHandle: function isCornerHandle() {\n      return Boolean(this.handle) && ['tl', 'tr', 'br', 'bl'].includes(this.handle);\n    }\n  },\n  watch: {\n    active: function active(val) {\n      this.enabled = val;\n\n      if (val) {\n        this.$emit('activated');\n      } else {\n        this.$emit('deactivated');\n      }\n    },\n    z: function z(val) {\n      if (val >= 0 || val === 'auto') {\n        this.zIndex = val;\n      }\n    },\n    rawLeft: function rawLeft(newLeft) {\n      var bounds = this.bounds;\n      var aspectFactor = this.aspectFactor;\n      var lockAspectRatio = this.lockAspectRatio;\n      var left = this.left;\n      var top = this.top;\n\n      if (bounds.minLeft !== null && newLeft < bounds.minLeft) {\n        newLeft = bounds.minLeft;\n      } else if (bounds.maxLeft !== null && bounds.maxLeft < newLeft) {\n        newLeft = bounds.maxLeft;\n      }\n\n      if (lockAspectRatio && this.resizingOnX) {\n        this.rawTop = top - (left - newLeft) / aspectFactor;\n      }\n\n      this.left = newLeft;\n    },\n    rawRight: function rawRight(newRight) {\n      var bounds = this.bounds;\n      var aspectFactor = this.aspectFactor;\n      var lockAspectRatio = this.lockAspectRatio;\n      var right = this.right;\n      var bottom = this.bottom;\n\n      if (bounds.minRight !== null && newRight < bounds.minRight) {\n        newRight = bounds.minRight;\n      } else if (bounds.maxRight !== null && bounds.maxRight < newRight) {\n        newRight = bounds.maxRight;\n      }\n\n      if (lockAspectRatio && this.resizingOnX) {\n        this.rawBottom = bottom - (right - newRight) / aspectFactor;\n      }\n\n      this.right = newRight;\n    },\n    rawTop: function rawTop(newTop) {\n      var bounds = this.bounds;\n      var aspectFactor = this.aspectFactor;\n      var lockAspectRatio = this.lockAspectRatio;\n      var left = this.left;\n      var top = this.top;\n\n      if (bounds.minTop !== null && newTop < bounds.minTop) {\n        newTop = bounds.minTop;\n      } else if (bounds.maxTop !== null && bounds.maxTop < newTop) {\n        newTop = bounds.maxTop;\n      }\n\n      if (lockAspectRatio && this.resizingOnY) {\n        this.rawLeft = left - (top - newTop) * aspectFactor;\n      }\n\n      this.top = newTop;\n    },\n    rawBottom: function rawBottom(newBottom) {\n      var bounds = this.bounds;\n      var aspectFactor = this.aspectFactor;\n      var lockAspectRatio = this.lockAspectRatio;\n      var right = this.right;\n      var bottom = this.bottom;\n\n      if (bounds.minBottom !== null && newBottom < bounds.minBottom) {\n        newBottom = bounds.minBottom;\n      } else if (bounds.maxBottom !== null && bounds.maxBottom < newBottom) {\n        newBottom = bounds.maxBottom;\n      }\n\n      if (lockAspectRatio && this.resizingOnY) {\n        this.rawRight = right - (bottom - newBottom) * aspectFactor;\n      }\n\n      this.bottom = newBottom;\n    },\n    x: function x() {\n      if (this.resizing || this.dragging) {\n        return;\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcDragLimits();\n      }\n\n      var delta = this.x - this.left;\n\n      if (delta % this.grid[0] === 0) {\n        this.rawLeft = this.x;\n        this.rawRight = this.right - delta;\n      }\n    },\n    y: function y() {\n      if (this.resizing || this.dragging) {\n        return;\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcDragLimits();\n      }\n\n      var delta = this.y - this.top;\n\n      if (delta % this.grid[1] === 0) {\n        this.rawTop = this.y;\n        this.rawBottom = this.bottom - delta;\n      }\n    },\n    lockAspectRatio: function lockAspectRatio(val) {\n      if (val) {\n        this.aspectFactor = this.width / this.height;\n      } else {\n        this.aspectFactor = undefined;\n      }\n    },\n    minWidth: function minWidth(val) {\n      if (val > 0 && val <= this.width) {\n        this.minW = val;\n      }\n    },\n    minHeight: function minHeight(val) {\n      if (val > 0 && val <= this.height) {\n        this.minH = val;\n      }\n    },\n    maxWidth: function maxWidth(val) {\n      this.maxW = val;\n    },\n    maxHeight: function maxHeight(val) {\n      this.maxH = val;\n    },\n    w: function w() {\n      if (this.resizing || this.dragging) {\n        return;\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcResizeLimits();\n      }\n\n      var delta = this.width - this.w;\n\n      if (delta % this.grid[0] === 0) {\n        this.rawRight = this.right + delta;\n      }\n    },\n    h: function h() {\n      if (this.resizing || this.dragging) {\n        return;\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcResizeLimits();\n      }\n\n      var delta = this.height - this.h;\n\n      if (delta % this.grid[1] === 0) {\n        this.rawBottom = this.bottom + delta;\n      }\n    }\n  }\n};",{"version":3,"sources":["vue-draggable-resizable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    :style=\"style\"\n    :class=\"[{\n      [classNameActive]: enabled,\n      [classNameDragging]: dragging,\n      [classNameResizing]: resizing,\n      [classNameDraggable]: draggable,\n      [classNameResizable]: resizable\n    }, className]\"\n    @contextmenu=\"contextmenu\"\n    @mousedown=\"elementDown\"\n    @touchstart=\"elementTouchDown\"\n  >\n    <div\n      v-for=\"handle in actualHandles\"\n      :key=\"handle\"\n      :class=\"[classNameHandle, classNameHandle + '-' + handle]\"\n      :style=\"{display: enabled ? 'block' : 'none'}\"\n      @mousedown.stop.prevent=\"handleDown(handle, $event)\"\n      @touchstart.stop.prevent=\"handleTouchDown(handle, $event)\"\n    >\n      <slot :name=\"handle\"></slot>\n    </div>\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport { matchesSelectorToParentElements, addEvent, removeEvent } from '../utils/dom'\n\nconst events = {\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup'\n  },\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend'\n  }\n}\n\nconst userSelectNone = {\n  userSelect: 'none',\n  MozUserSelect: 'none',\n  WebkitUserSelect: 'none',\n  MsUserSelect: 'none'\n}\n\nconst userSelectAuto = {\n  userSelect: 'auto',\n  MozUserSelect: 'auto',\n  WebkitUserSelect: 'auto',\n  MsUserSelect: 'auto'\n}\n\nlet eventsFor = events.mouse\n\nexport default {\n  replace: true,\n  name: 'vue-draggable-resizable',\n  props: {\n    className: {\n      type: String,\n      default: 'vdr'\n    },\n    classNameDraggable: {\n      type: String,\n      default: 'draggable'\n    },\n    classNameResizable: {\n      type: String,\n      default: 'resizable'\n    },\n    classNameDragging: {\n      type: String,\n      default: 'dragging'\n    },\n    classNameResizing: {\n      type: String,\n      default: 'resizing'\n    },\n    classNameActive: {\n      type: String,\n      default: 'active'\n    },\n    classNameHandle: {\n      type: String,\n      default: 'handle'\n    },\n    disableUserSelect: {\n      type: Boolean,\n      default: true\n    },\n    enableNativeDrag: {\n      type: Boolean,\n      default: false\n    },\n    preventDeactivation: {\n      type: Boolean,\n      default: false\n    },\n    active: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: true\n    },\n    resizable: {\n      type: Boolean,\n      default: true\n    },\n    lockAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    w: {\n      type: Number,\n      default: 200,\n      validator: (val) => val > 0\n    },\n    h: {\n      type: Number,\n      default: 200,\n      validator: (val) => val > 0\n    },\n    minWidth: {\n      type: Number,\n      default: 0,\n      validator: (val) => val >= 0\n    },\n    minHeight: {\n      type: Number,\n      default: 0,\n      validator: (val) => val >= 0\n    },\n    maxWidth: {\n      type: Number,\n      default: null,\n      validator: (val) => val >= 0\n    },\n    maxHeight: {\n      type: Number,\n      default: null,\n      validator: (val) => val >= 0\n    },\n    x: {\n      type: Number,\n      default: 0,\n      validator: (val) => typeof val === 'number'\n    },\n    y: {\n      type: Number,\n      default: 0,\n      validator: (val) => typeof val === 'number'\n    },\n    z: {\n      type: [String, Number],\n      default: 'auto',\n      validator: (val) => (typeof val === 'string' ? val === 'auto' : val >= 0)\n    },\n    handles: {\n      type: Array,\n      default: () => ['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml'],\n      validator: (val) => {\n        const s = new Set(['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml'])\n\n        return new Set(val.filter(h => s.has(h))).size === val.length\n      }\n    },\n    dragHandle: {\n      type: String,\n      default: null\n    },\n    dragCancel: {\n      type: String,\n      default: null\n    },\n    axis: {\n      type: String,\n      default: 'both',\n      validator: (val) => ['x', 'y', 'both'].includes(val)\n    },\n    grid: {\n      type: Array,\n      default: () => [1, 1]\n    },\n    parent: {\n      type: Boolean,\n      default: false\n    },\n    onDragStart: {\n      type: Function,\n      default: null\n    },\n    onResizeStart: {\n      type: Function,\n      default: null\n    }\n  },\n\n  data: function () {\n    return {\n      rawWidth: this.w,\n      rawHeight: this.h,\n      rawLeft: this.x,\n      rawTop: this.y,\n      rawRight: null,\n      rawBottom: null,\n\n      left: this.x,\n      top: this.y,\n      right: null,\n      bottom: null,\n\n      aspectFactor: this.w / this.h,\n\n      parentWidth: null,\n      parentHeight: null,\n\n      minW: this.minWidth,\n      minH: this.minHeight,\n\n      maxW: this.maxWidth,\n      maxH: this.maxHeight,\n\n      handle: null,\n      enabled: this.active,\n      resizing: false,\n      dragging: false,\n      zIndex: this.z\n    }\n  },\n\n  created: function () {\n    // eslint-disable-next-line\n    if (this.maxWidth && this.minWidth > this.maxWidth) console.warn('[Vdr warn]: Invalid prop: minWidth cannot be greater than maxWidth')\n    // eslint-disable-next-line\n    if (this.maxWidth && this.minHeight > this.maxHeight) console.warn('[Vdr warn]: Invalid prop: minHeight cannot be greater than maxHeight')\n\n    this.resetBoundsAndMouseState()\n  },\n  mounted: function () {\n    if (!this.enableNativeDrag) {\n      this.$el.ondragstart = () => false\n    }\n\n    [this.parentWidth, this.parentHeight] = this.getParentSize()\n\n    this.rawRight = this.parentWidth - this.rawWidth - this.rawLeft\n    this.rawBottom = this.parentHeight - this.rawHeight - this.rawTop\n\n    addEvent(document.documentElement, 'mousedown', this.deselect)\n    addEvent(document.documentElement, 'touchend touchcancel', this.deselect)\n\n    addEvent(window, 'resize', this.checkParentSize)\n  },\n  beforeDestroy: function () {\n    removeEvent(document.documentElement, 'mousedown', this.deselect)\n    removeEvent(document.documentElement, 'touchstart', this.handleUp)\n    removeEvent(document.documentElement, 'mousemove', this.move)\n    removeEvent(document.documentElement, 'touchmove', this.move)\n    removeEvent(document.documentElement, 'mouseup', this.handleUp)\n    removeEvent(document.documentElement, 'touchend touchcancel', this.deselect)\n\n    removeEvent(window, 'resize', this.checkParentSize)\n  },\n\n  methods: {\n    resetBoundsAndMouseState () {\n      this.mouseClickPosition = { mouseX: 0, mouseY: 0, x: 0, y: 0, w: 0, h: 0 }\n\n      this.bounds = {\n        minLeft: null,\n        maxLeft: null,\n        minRight: null,\n        maxRight: null,\n        minTop: null,\n        maxTop: null,\n        minBottom: null,\n        maxBottom: null\n      }\n    },\n    checkParentSize () {\n      if (this.parent) {\n        const [newParentWidth, newParentHeight] = this.getParentSize()\n\n        const deltaX = this.parentWidth - newParentWidth\n        const deltaY = this.parentHeight - newParentHeight\n\n        this.rawRight -= deltaX\n        this.rawBottom -= deltaY\n\n        this.parentWidth = newParentWidth\n        this.parentHeight = newParentHeight\n      }\n    },\n    getParentSize () {\n      if (this.parent) {\n        const style = window.getComputedStyle(this.$el.parentNode, null)\n\n        return [\n          parseInt(style.getPropertyValue('width'), 10),\n          parseInt(style.getPropertyValue('height'), 10)\n        ]\n      }\n\n      return [null, null]\n    },\n    elementTouchDown (e) {\n      eventsFor = events.touch\n      this.elementDown(e)\n    },\n    contextmenu (e) {\n      this.$emit('onDelete')\n      e.preventDefault()\n    },\n    elementDown (e) {\n      if (e.button === 2) {\n        return\n      }\n      const target = e.target || e.srcElement\n\n      if (this.$el.contains(target)) {\n        if (this.onDragStart && this.onDragStart(e) === false) {\n          return\n        }\n\n        if (\n          (this.dragHandle && !matchesSelectorToParentElements(target, this.dragHandle, this.$el)) ||\n          (this.dragCancel && matchesSelectorToParentElements(target, this.dragCancel, this.$el))\n        ) {\n          return\n        }\n\n        if (!this.enabled) {\n          this.enabled = true\n\n          this.$emit('activated')\n          this.$emit('update:active', true)\n        }\n\n        if (this.draggable) {\n          this.dragging = true\n        }\n\n        this.mouseClickPosition.mouseX = e.touches ? e.touches[0].pageX : e.pageX\n        this.mouseClickPosition.mouseY = e.touches ? e.touches[0].pageY : e.pageY\n\n        this.mouseClickPosition.left = this.left\n        this.mouseClickPosition.right = this.right\n        this.mouseClickPosition.top = this.top\n        this.mouseClickPosition.bottom = this.bottom\n\n        if (this.parent) {\n          this.bounds = this.calcDragLimits()\n        }\n\n        addEvent(document.documentElement, eventsFor.move, this.move)\n        addEvent(document.documentElement, eventsFor.stop, this.handleUp)\n      }\n    },\n    calcDragLimits () {\n      return {\n        minLeft: (this.parentWidth + this.left) % this.grid[0],\n        maxLeft: Math.floor((this.parentWidth - this.width - this.left) / this.grid[0]) * this.grid[0] + this.left,\n        minRight: (this.parentWidth + this.right) % this.grid[0],\n        maxRight: Math.floor((this.parentWidth - this.width - this.right) / this.grid[0]) * this.grid[0] + this.right,\n        minTop: (this.parentHeight + this.top) % this.grid[1],\n        maxTop: Math.floor((this.parentHeight - this.height - this.top) / this.grid[1]) * this.grid[1] + this.top,\n        minBottom: (this.parentHeight + this.bottom) % this.grid[1],\n        maxBottom: Math.floor((this.parentHeight - this.height - this.bottom) / this.grid[1]) * this.grid[1] + this.bottom\n      }\n    },\n    deselect (e) {\n      const target = e.target || e.srcElement\n      const regex = new RegExp(this.className + '-([trmbl]{2})', '')\n\n      if (!this.$el.contains(target) && !regex.test(target.className)) {\n        if (this.enabled && !this.preventDeactivation) {\n          this.enabled = false\n\n          this.$emit('deactivated')\n          this.$emit('update:active', false)\n        }\n\n        removeEvent(document.documentElement, eventsFor.move, this.handleMove)\n      }\n\n      this.resetBoundsAndMouseState()\n    },\n    handleTouchDown (handle, e) {\n      eventsFor = events.touch\n\n      this.handleDown(handle, e)\n    },\n    handleDown (handle, e) {\n      if (this.onResizeStart && this.onResizeStart(handle, e) === false) {\n        return\n      }\n\n      if (e.stopPropagation) e.stopPropagation()\n\n      // Here we avoid a dangerous recursion by faking\n      // corner handles as middle handles\n      if (this.lockAspectRatio && !handle.includes('m')) {\n        this.handle = 'm' + handle.substring(1)\n      } else {\n        this.handle = handle\n      }\n\n      this.resizing = true\n\n      this.mouseClickPosition.mouseX = e.touches ? e.touches[0].pageX : e.pageX\n      this.mouseClickPosition.mouseY = e.touches ? e.touches[0].pageY : e.pageY\n      this.mouseClickPosition.left = this.left\n      this.mouseClickPosition.right = this.right\n      this.mouseClickPosition.top = this.top\n      this.mouseClickPosition.bottom = this.bottom\n\n      this.bounds = this.calcResizeLimits()\n\n      addEvent(document.documentElement, eventsFor.move, this.handleMove)\n      addEvent(document.documentElement, eventsFor.stop, this.handleUp)\n    },\n    calcResizeLimits () {\n      let minW = this.minW\n      let minH = this.minH\n      let maxW = this.maxW\n      let maxH = this.maxH\n\n      const aspectFactor = this.aspectFactor\n      const [gridX, gridY] = this.grid\n      const width = this.width\n      const height = this.height\n      const left = this.left\n      const top = this.top\n      const right = this.right\n      const bottom = this.bottom\n\n      if (this.lockAspectRatio) {\n        if (minW / minH > aspectFactor) {\n          minH = minW / aspectFactor\n        } else {\n          minW = aspectFactor * minH\n        }\n\n        if (maxW && maxH) {\n          maxW = Math.min(maxW, aspectFactor * maxH)\n          maxH = Math.min(maxH, maxW / aspectFactor)\n        } else if (maxW) {\n          maxH = maxW / aspectFactor\n        } else if (maxH) {\n          maxW = aspectFactor * maxH\n        }\n      }\n\n      maxW = maxW - (maxW % gridX)\n      maxH = maxH - (maxH % gridY)\n\n      const limits = {\n        minLeft: null,\n        maxLeft: null,\n        minTop: null,\n        maxTop: null,\n        minRight: null,\n        maxRight: null,\n        minBottom: null,\n        maxBottom: null\n      }\n\n      if (this.parent) {\n        limits.minLeft = (this.parentWidth + left) % gridX\n        limits.maxLeft = left + Math.floor((width - minW) / gridX) * gridX\n        limits.minTop = (this.parentHeight + top) % gridY\n        limits.maxTop = top + Math.floor((height - minH) / gridY) * gridY\n        limits.minRight = (this.parentWidth + right) % gridX\n        limits.maxRight = right + Math.floor((width - minW) / gridX) * gridX\n        limits.minBottom = (this.parentHeight + bottom) % gridY\n        limits.maxBottom = bottom + Math.floor((height - minH) / gridY) * gridY\n\n        if (maxW) {\n          limits.minLeft = Math.max(limits.minLeft, this.parentWidth - right - maxW)\n          limits.minRight = Math.max(limits.minRight, this.parentWidth - left - maxW)\n        }\n\n        if (maxH) {\n          limits.minTop = Math.max(limits.minTop, this.parentHeight - bottom - maxH)\n          limits.minBottom = Math.max(limits.minBottom, this.parentHeight - top - maxH)\n        }\n\n        if (this.lockAspectRatio) {\n          limits.minLeft = Math.max(limits.minLeft, left - top * aspectFactor)\n          limits.minTop = Math.max(limits.minTop, top - left / aspectFactor)\n          limits.minRight = Math.max(limits.minRight, right - bottom * aspectFactor)\n          limits.minBottom = Math.max(limits.minBottom, bottom - right / aspectFactor)\n        }\n      } else {\n        limits.minLeft = null\n        limits.maxLeft = left + Math.floor((width - minW) / gridX) * gridX\n        limits.minTop = null\n        limits.maxTop = top + Math.floor((height - minH) / gridY) * gridY\n        limits.minRight = null\n        limits.maxRight = right + Math.floor((width - minW) / gridX) * gridX\n        limits.minBottom = null\n        limits.maxBottom = bottom + Math.floor((height - minH) / gridY) * gridY\n\n        if (maxW) {\n          limits.minLeft = -(right + maxW)\n          limits.minRight = -(left + maxW)\n        }\n\n        if (maxH) {\n          limits.minTop = -(bottom + maxH)\n          limits.minBottom = -(top + maxH)\n        }\n\n        if (this.lockAspectRatio && (maxW && maxH)) {\n          limits.minLeft = Math.min(limits.minLeft, -(right + maxW))\n          limits.minTop = Math.min(limits.minTop, -(maxH + bottom))\n          limits.minRight = Math.min(limits.minRight, -left - maxW)\n          limits.minBottom = Math.min(limits.minBottom, -top - maxH)\n        }\n      }\n\n      return limits\n    },\n    move (e) {\n      if (this.resizing) {\n        this.handleMove(e)\n      } else if (this.dragging) {\n        this.elementMove(e)\n      }\n    },\n    elementMove (e) {\n      const axis = this.axis\n      const grid = this.grid\n      const mouseClickPosition = this.mouseClickPosition\n\n      const tmpDeltaX = axis && axis !== 'y' ? mouseClickPosition.mouseX - (e.touches ? e.touches[0].pageX : e.pageX) : 0\n      const tmpDeltaY = axis && axis !== 'x' ? mouseClickPosition.mouseY - (e.touches ? e.touches[0].pageY : e.pageY) : 0\n\n      const [deltaX, deltaY] = this.snapToGrid(this.grid, tmpDeltaX, tmpDeltaY)\n\n      if (!deltaX && !deltaY) return\n\n      this.rawTop = mouseClickPosition.top - deltaY\n      this.rawBottom = mouseClickPosition.bottom + deltaY\n      this.rawLeft = mouseClickPosition.left - deltaX\n      this.rawRight = mouseClickPosition.right + deltaX\n\n      this.$emit('dragging', this.left, this.top)\n    },\n    handleMove (e) {\n      const handle = this.handle\n      const mouseClickPosition = this.mouseClickPosition\n\n      const tmpDeltaX = mouseClickPosition.mouseX - (e.touches ? e.touches[0].pageX : e.pageX)\n      const tmpDeltaY = mouseClickPosition.mouseY - (e.touches ? e.touches[0].pageY : e.pageY)\n\n      const [deltaX, deltaY] = this.snapToGrid(this.grid, tmpDeltaX, tmpDeltaY)\n\n      if (!deltaX && !deltaY) return\n\n      if (handle.includes('b')) {\n        this.rawBottom = mouseClickPosition.bottom + deltaY\n      } else if (handle.includes('t')) {\n        this.rawTop = mouseClickPosition.top - deltaY\n      }\n\n      if (handle.includes('r')) {\n        this.rawRight = mouseClickPosition.right + deltaX\n      } else if (handle.includes('l')) {\n        this.rawLeft = mouseClickPosition.left - deltaX\n      }\n\n      this.$emit('resizing', this.left, this.top, this.width, this.height)\n    },\n    handleUp (e) {\n      this.handle = null\n\n      this.resetBoundsAndMouseState()\n\n      this.rawTop = this.top\n      this.rawBottom = this.bottom\n      this.rawLeft = this.left\n      this.rawRight = this.right\n\n      if (this.resizing) {\n        this.resizing = false\n        this.$emit('resizestop', this.left, this.top, this.width, this.height)\n      }\n      if (this.dragging) {\n        this.dragging = false\n        this.$emit('dragstop', this.left, this.top)\n      }\n\n      removeEvent(document.documentElement, eventsFor.move, this.handleMove)\n    },\n    snapToGrid (grid, pendingX, pendingY) {\n      const x = Math.round(pendingX / grid[0]) * grid[0]\n      const y = Math.round(pendingY / grid[1]) * grid[1]\n\n      return [x, y]\n    }\n  },\n  computed: {\n    style () {\n      return {\n        position: 'absolute',\n        top: this.top + 'px',\n        left: this.left + 'px',\n        width: this.width + 'px',\n        height: this.height + 'px',\n        zIndex: this.zIndex,\n        ...(this.dragging && this.disableUserSelect ? userSelectNone : userSelectAuto)\n      }\n    },\n    actualHandles () {\n      if (!this.resizable) return []\n\n      return this.handles\n    },\n    width () {\n      return this.parentWidth - this.left - this.right\n    },\n    height () {\n      return this.parentHeight - this.top - this.bottom\n    },\n    resizingOnX () {\n      return (Boolean(this.handle) && (this.handle.includes('l') || this.handle.includes('r')))\n    },\n    resizingOnY () {\n      return (Boolean(this.handle) && (this.handle.includes('t') || this.handle.includes('b')))\n    },\n    isCornerHandle () {\n      return (Boolean(this.handle) && ['tl', 'tr', 'br', 'bl'].includes(this.handle))\n    }\n  },\n\n  watch: {\n    active (val) {\n      this.enabled = val\n\n      if (val) {\n        this.$emit('activated')\n      } else {\n        this.$emit('deactivated')\n      }\n    },\n    z (val) {\n      if (val >= 0 || val === 'auto') {\n        this.zIndex = val\n      }\n    },\n    rawLeft (newLeft) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const left = this.left\n      const top = this.top\n\n      if (bounds.minLeft !== null && newLeft < bounds.minLeft) {\n        newLeft = bounds.minLeft\n      } else if (bounds.maxLeft !== null && bounds.maxLeft < newLeft) {\n        newLeft = bounds.maxLeft\n      }\n\n      if (lockAspectRatio && this.resizingOnX) {\n        this.rawTop = top - (left - newLeft) / aspectFactor\n      }\n\n      this.left = newLeft\n    },\n    rawRight (newRight) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const right = this.right\n      const bottom = this.bottom\n\n      if (bounds.minRight !== null && newRight < bounds.minRight) {\n        newRight = bounds.minRight\n      } else if (bounds.maxRight !== null && bounds.maxRight < newRight) {\n        newRight = bounds.maxRight\n      }\n\n      if (lockAspectRatio && this.resizingOnX) {\n        this.rawBottom = bottom - (right - newRight) / aspectFactor\n      }\n\n      this.right = newRight\n    },\n    rawTop (newTop) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const left = this.left\n      const top = this.top\n\n      if (bounds.minTop !== null && newTop < bounds.minTop) {\n        newTop = bounds.minTop\n      } else if (bounds.maxTop !== null && bounds.maxTop < newTop) {\n        newTop = bounds.maxTop\n      }\n\n      if (lockAspectRatio && this.resizingOnY) {\n        this.rawLeft = left - (top - newTop) * aspectFactor\n      }\n\n      this.top = newTop\n    },\n    rawBottom (newBottom) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const right = this.right\n      const bottom = this.bottom\n\n      if (bounds.minBottom !== null && newBottom < bounds.minBottom) {\n        newBottom = bounds.minBottom\n      } else if (bounds.maxBottom !== null && bounds.maxBottom < newBottom) {\n        newBottom = bounds.maxBottom\n      }\n\n      if (lockAspectRatio && this.resizingOnY) {\n        this.rawRight = right - (bottom - newBottom) * aspectFactor\n      }\n\n      this.bottom = newBottom\n    },\n    x () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcDragLimits()\n      }\n\n      const delta = this.x - this.left\n\n      if (delta % this.grid[0] === 0) {\n        this.rawLeft = this.x\n        this.rawRight = this.right - delta\n      }\n    },\n    y () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcDragLimits()\n      }\n\n      const delta = this.y - this.top\n\n      if (delta % this.grid[1] === 0) {\n        this.rawTop = this.y\n        this.rawBottom = this.bottom - delta\n      }\n    },\n    lockAspectRatio (val) {\n      if (val) {\n        this.aspectFactor = this.width / this.height\n      } else {\n        this.aspectFactor = undefined\n      }\n    },\n    minWidth (val) {\n      if (val > 0 && val <= this.width) {\n        this.minW = val\n      }\n    },\n    minHeight (val) {\n      if (val > 0 && val <= this.height) {\n        this.minH = val\n      }\n    },\n    maxWidth (val) {\n      this.maxW = val\n    },\n    maxHeight (val) {\n      this.maxH = val\n    },\n    w () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcResizeLimits()\n      }\n\n      const delta = this.width - this.w\n\n      if (delta % this.grid[0] === 0) {\n        this.rawRight = this.right + delta\n      }\n    },\n    h () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcResizeLimits()\n      }\n\n      const delta = this.height - this.h\n\n      if (delta % this.grid[1] === 0) {\n        this.rawBottom = this.bottom + delta\n      }\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src\\components"}]}