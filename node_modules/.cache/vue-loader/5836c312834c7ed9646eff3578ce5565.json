{"remainingRequest":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\src\\components\\drag-resize-forvue.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\src\\components\\drag-resize-forvue.vue","mtime":1566184278924},{"path":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\AAA\\Desktop\\drag-resize-forvue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { matchesSelectorToParentElements, addEvent, removeEvent } from '../utils/dom'\n\nconst events = {\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup'\n  },\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend'\n  }\n}\n\nconst userSelectNone = {\n  userSelect: 'none',\n  MozUserSelect: 'none',\n  WebkitUserSelect: 'none',\n  MsUserSelect: 'none'\n}\n\nconst userSelectAuto = {\n  userSelect: 'auto',\n  MozUserSelect: 'auto',\n  WebkitUserSelect: 'auto',\n  MsUserSelect: 'auto'\n}\n\nlet eventsFor = events.mouse\n\nexport default {\n  replace: true,\n  name: 'vue-draggable-resizable',\n  props: {\n    className: {\n      type: String,\n      default: 'vdr'\n    },\n    classNameDraggable: {\n      type: String,\n      default: 'draggable'\n    },\n    classNameResizable: {\n      type: String,\n      default: 'resizable'\n    },\n    classNameDragging: {\n      type: String,\n      default: 'dragging'\n    },\n    classNameResizing: {\n      type: String,\n      default: 'resizing'\n    },\n    classNameActive: {\n      type: String,\n      default: 'active'\n    },\n    classNameHandle: {\n      type: String,\n      default: 'handle'\n    },\n    disableUserSelect: {\n      type: Boolean,\n      default: true\n    },\n    enableNativeDrag: {\n      type: Boolean,\n      default: false\n    },\n    preventDeactivation: {\n      type: Boolean,\n      default: false\n    },\n    active: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: true\n    },\n    resizable: {\n      type: Boolean,\n      default: true\n    },\n    lockAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    w: {\n      type: Number,\n      default: 200,\n      validator: (val) => val > 0\n    },\n    h: {\n      type: Number,\n      default: 200,\n      validator: (val) => val > 0\n    },\n    minWidth: {\n      type: Number,\n      default: 0,\n      validator: (val) => val >= 0\n    },\n    minHeight: {\n      type: Number,\n      default: 0,\n      validator: (val) => val >= 0\n    },\n    maxWidth: {\n      type: Number,\n      default: null,\n      validator: (val) => val >= 0\n    },\n    maxHeight: {\n      type: Number,\n      default: null,\n      validator: (val) => val >= 0\n    },\n    x: {\n      type: Number,\n      default: 0,\n      validator: (val) => typeof val === 'number'\n    },\n    y: {\n      type: Number,\n      default: 0,\n      validator: (val) => typeof val === 'number'\n    },\n    z: {\n      type: [String, Number],\n      default: 'auto',\n      validator: (val) => (typeof val === 'string' ? val === 'auto' : val >= 0)\n    },\n    handles: {\n      type: Array,\n      default: () => ['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml'],\n      validator: (val) => {\n        const s = new Set(['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml'])\n\n        return new Set(val.filter(h => s.has(h))).size === val.length\n      }\n    },\n    dragHandle: {\n      type: String,\n      default: null\n    },\n    dragCancel: {\n      type: String,\n      default: null\n    },\n    axis: {\n      type: String,\n      default: 'both',\n      validator: (val) => ['x', 'y', 'both'].includes(val)\n    },\n    grid: {\n      type: Array,\n      default: () => [1, 1]\n    },\n    parent: {\n      type: Boolean,\n      default: false\n    },\n    onDragStart: {\n      type: Function,\n      default: null\n    },\n    onResizeStart: {\n      type: Function,\n      default: null\n    }\n  },\n\n  data: function () {\n    return {\n      rawWidth: this.w,\n      rawHeight: this.h,\n      rawLeft: this.x,\n      rawTop: this.y,\n      rawRight: null,\n      rawBottom: null,\n\n      left: this.x,\n      top: this.y,\n      right: null,\n      bottom: null,\n\n      aspectFactor: this.w / this.h,\n\n      parentWidth: null,\n      parentHeight: null,\n\n      minW: this.minWidth,\n      minH: this.minHeight,\n\n      maxW: this.maxWidth,\n      maxH: this.maxHeight,\n\n      handle: null,\n      enabled: this.active,\n      resizing: false,\n      dragging: false,\n      zIndex: this.z\n    }\n  },\n\n  created: function () {\n    // eslint-disable-next-line\n    if (this.maxWidth && this.minWidth > this.maxWidth) console.warn('[Vdr warn]: Invalid prop: minWidth cannot be greater than maxWidth')\n    // eslint-disable-next-line\n    if (this.maxWidth && this.minHeight > this.maxHeight) console.warn('[Vdr warn]: Invalid prop: minHeight cannot be greater than maxHeight')\n\n    this.resetBoundsAndMouseState()\n  },\n  mounted: function () {\n    if (!this.enableNativeDrag) {\n      this.$el.ondragstart = () => false\n    }\n\n    [this.parentWidth, this.parentHeight] = this.getParentSize()\n\n    this.rawRight = this.parentWidth - this.rawWidth - this.rawLeft\n    this.rawBottom = this.parentHeight - this.rawHeight - this.rawTop\n\n    addEvent(document.documentElement, 'mousedown', this.deselect)\n    addEvent(document.documentElement, 'touchend touchcancel', this.deselect)\n\n    addEvent(window, 'resize', this.checkParentSize)\n  },\n  beforeDestroy: function () {\n    removeEvent(document.documentElement, 'mousedown', this.deselect)\n    removeEvent(document.documentElement, 'touchstart', this.handleUp)\n    removeEvent(document.documentElement, 'mousemove', this.move)\n    removeEvent(document.documentElement, 'touchmove', this.move)\n    removeEvent(document.documentElement, 'mouseup', this.handleUp)\n    removeEvent(document.documentElement, 'touchend touchcancel', this.deselect)\n\n    removeEvent(window, 'resize', this.checkParentSize)\n  },\n\n  methods: {\n    resetBoundsAndMouseState () {\n      this.mouseClickPosition = { mouseX: 0, mouseY: 0, x: 0, y: 0, w: 0, h: 0 }\n\n      this.bounds = {\n        minLeft: null,\n        maxLeft: null,\n        minRight: null,\n        maxRight: null,\n        minTop: null,\n        maxTop: null,\n        minBottom: null,\n        maxBottom: null\n      }\n    },\n    checkParentSize () {\n      if (this.parent) {\n        const [newParentWidth, newParentHeight] = this.getParentSize()\n\n        const deltaX = this.parentWidth - newParentWidth\n        const deltaY = this.parentHeight - newParentHeight\n\n        this.rawRight -= deltaX\n        this.rawBottom -= deltaY\n\n        this.parentWidth = newParentWidth\n        this.parentHeight = newParentHeight\n      }\n    },\n    getParentSize () {\n      if (this.parent) {\n        const style = window.getComputedStyle(this.$el.parentNode, null)\n\n        return [\n          parseInt(style.getPropertyValue('width'), 10),\n          parseInt(style.getPropertyValue('height'), 10)\n        ]\n      }\n\n      return [null, null]\n    },\n    elementTouchDown (e) {\n      eventsFor = events.touch\n      this.elementDown(e)\n    },\n    contextmenu (e) {\n      this.$emit('onDelete')\n      e.preventDefault()\n    },\n    elementDown (e) {\n      if (e.button === 2) {\n        return\n      }\n      const target = e.target || e.srcElement\n\n      if (this.$el.contains(target)) {\n        if (this.onDragStart && this.onDragStart(e) === false) {\n          return\n        }\n\n        if (\n          (this.dragHandle && !matchesSelectorToParentElements(target, this.dragHandle, this.$el)) ||\n          (this.dragCancel && matchesSelectorToParentElements(target, this.dragCancel, this.$el))\n        ) {\n          return\n        }\n\n        if (!this.enabled) {\n          this.enabled = true\n\n          this.$emit('activated')\n          this.$emit('update:active', true)\n        }\n\n        if (this.draggable) {\n          this.dragging = true\n        }\n\n        this.mouseClickPosition.mouseX = e.touches ? e.touches[0].pageX : e.pageX\n        this.mouseClickPosition.mouseY = e.touches ? e.touches[0].pageY : e.pageY\n\n        this.mouseClickPosition.left = this.left\n        this.mouseClickPosition.right = this.right\n        this.mouseClickPosition.top = this.top\n        this.mouseClickPosition.bottom = this.bottom\n\n        if (this.parent) {\n          this.bounds = this.calcDragLimits()\n        }\n\n        addEvent(document.documentElement, eventsFor.move, this.move)\n        addEvent(document.documentElement, eventsFor.stop, this.handleUp)\n      }\n    },\n    calcDragLimits () {\n      return {\n        minLeft: (this.parentWidth + this.left) % this.grid[0],\n        maxLeft: Math.floor((this.parentWidth - this.width - this.left) / this.grid[0]) * this.grid[0] + this.left,\n        minRight: (this.parentWidth + this.right) % this.grid[0],\n        maxRight: Math.floor((this.parentWidth - this.width - this.right) / this.grid[0]) * this.grid[0] + this.right,\n        minTop: (this.parentHeight + this.top) % this.grid[1],\n        maxTop: Math.floor((this.parentHeight - this.height - this.top) / this.grid[1]) * this.grid[1] + this.top,\n        minBottom: (this.parentHeight + this.bottom) % this.grid[1],\n        maxBottom: Math.floor((this.parentHeight - this.height - this.bottom) / this.grid[1]) * this.grid[1] + this.bottom\n      }\n    },\n    deselect (e) {\n      const target = e.target || e.srcElement\n      const regex = new RegExp(this.className + '-([trmbl]{2})', '')\n\n      if (!this.$el.contains(target) && !regex.test(target.className)) {\n        if (this.enabled && !this.preventDeactivation) {\n          this.enabled = false\n\n          this.$emit('deactivated')\n          this.$emit('update:active', false)\n        }\n\n        removeEvent(document.documentElement, eventsFor.move, this.handleMove)\n      }\n\n      this.resetBoundsAndMouseState()\n    },\n    handleTouchDown (handle, e) {\n      eventsFor = events.touch\n\n      this.handleDown(handle, e)\n    },\n    handleDown (handle, e) {\n      if (this.onResizeStart && this.onResizeStart(handle, e) === false) {\n        return\n      }\n\n      if (e.stopPropagation) e.stopPropagation()\n\n      // Here we avoid a dangerous recursion by faking\n      // corner handles as middle handles\n      if (this.lockAspectRatio && !handle.includes('m')) {\n        this.handle = 'm' + handle.substring(1)\n      } else {\n        this.handle = handle\n      }\n\n      this.resizing = true\n\n      this.mouseClickPosition.mouseX = e.touches ? e.touches[0].pageX : e.pageX\n      this.mouseClickPosition.mouseY = e.touches ? e.touches[0].pageY : e.pageY\n      this.mouseClickPosition.left = this.left\n      this.mouseClickPosition.right = this.right\n      this.mouseClickPosition.top = this.top\n      this.mouseClickPosition.bottom = this.bottom\n\n      this.bounds = this.calcResizeLimits()\n\n      addEvent(document.documentElement, eventsFor.move, this.handleMove)\n      addEvent(document.documentElement, eventsFor.stop, this.handleUp)\n    },\n    calcResizeLimits () {\n      let minW = this.minW\n      let minH = this.minH\n      let maxW = this.maxW\n      let maxH = this.maxH\n\n      const aspectFactor = this.aspectFactor\n      const [gridX, gridY] = this.grid\n      const width = this.width\n      const height = this.height\n      const left = this.left\n      const top = this.top\n      const right = this.right\n      const bottom = this.bottom\n\n      if (this.lockAspectRatio) {\n        if (minW / minH > aspectFactor) {\n          minH = minW / aspectFactor\n        } else {\n          minW = aspectFactor * minH\n        }\n\n        if (maxW && maxH) {\n          maxW = Math.min(maxW, aspectFactor * maxH)\n          maxH = Math.min(maxH, maxW / aspectFactor)\n        } else if (maxW) {\n          maxH = maxW / aspectFactor\n        } else if (maxH) {\n          maxW = aspectFactor * maxH\n        }\n      }\n\n      maxW = maxW - (maxW % gridX)\n      maxH = maxH - (maxH % gridY)\n\n      const limits = {\n        minLeft: null,\n        maxLeft: null,\n        minTop: null,\n        maxTop: null,\n        minRight: null,\n        maxRight: null,\n        minBottom: null,\n        maxBottom: null\n      }\n\n      if (this.parent) {\n        limits.minLeft = (this.parentWidth + left) % gridX\n        limits.maxLeft = left + Math.floor((width - minW) / gridX) * gridX\n        limits.minTop = (this.parentHeight + top) % gridY\n        limits.maxTop = top + Math.floor((height - minH) / gridY) * gridY\n        limits.minRight = (this.parentWidth + right) % gridX\n        limits.maxRight = right + Math.floor((width - minW) / gridX) * gridX\n        limits.minBottom = (this.parentHeight + bottom) % gridY\n        limits.maxBottom = bottom + Math.floor((height - minH) / gridY) * gridY\n\n        if (maxW) {\n          limits.minLeft = Math.max(limits.minLeft, this.parentWidth - right - maxW)\n          limits.minRight = Math.max(limits.minRight, this.parentWidth - left - maxW)\n        }\n\n        if (maxH) {\n          limits.minTop = Math.max(limits.minTop, this.parentHeight - bottom - maxH)\n          limits.minBottom = Math.max(limits.minBottom, this.parentHeight - top - maxH)\n        }\n\n        if (this.lockAspectRatio) {\n          limits.minLeft = Math.max(limits.minLeft, left - top * aspectFactor)\n          limits.minTop = Math.max(limits.minTop, top - left / aspectFactor)\n          limits.minRight = Math.max(limits.minRight, right - bottom * aspectFactor)\n          limits.minBottom = Math.max(limits.minBottom, bottom - right / aspectFactor)\n        }\n      } else {\n        limits.minLeft = null\n        limits.maxLeft = left + Math.floor((width - minW) / gridX) * gridX\n        limits.minTop = null\n        limits.maxTop = top + Math.floor((height - minH) / gridY) * gridY\n        limits.minRight = null\n        limits.maxRight = right + Math.floor((width - minW) / gridX) * gridX\n        limits.minBottom = null\n        limits.maxBottom = bottom + Math.floor((height - minH) / gridY) * gridY\n\n        if (maxW) {\n          limits.minLeft = -(right + maxW)\n          limits.minRight = -(left + maxW)\n        }\n\n        if (maxH) {\n          limits.minTop = -(bottom + maxH)\n          limits.minBottom = -(top + maxH)\n        }\n\n        if (this.lockAspectRatio && (maxW && maxH)) {\n          limits.minLeft = Math.min(limits.minLeft, -(right + maxW))\n          limits.minTop = Math.min(limits.minTop, -(maxH + bottom))\n          limits.minRight = Math.min(limits.minRight, -left - maxW)\n          limits.minBottom = Math.min(limits.minBottom, -top - maxH)\n        }\n      }\n\n      return limits\n    },\n    move (e) {\n      if (this.resizing) {\n        this.handleMove(e)\n      } else if (this.dragging) {\n        this.elementMove(e)\n      }\n    },\n    elementMove (e) {\n      const axis = this.axis\n      const grid = this.grid\n      const mouseClickPosition = this.mouseClickPosition\n\n      const tmpDeltaX = axis && axis !== 'y' ? mouseClickPosition.mouseX - (e.touches ? e.touches[0].pageX : e.pageX) : 0\n      const tmpDeltaY = axis && axis !== 'x' ? mouseClickPosition.mouseY - (e.touches ? e.touches[0].pageY : e.pageY) : 0\n\n      const [deltaX, deltaY] = this.snapToGrid(this.grid, tmpDeltaX, tmpDeltaY)\n\n      if (!deltaX && !deltaY) return\n\n      this.rawTop = mouseClickPosition.top - deltaY\n      this.rawBottom = mouseClickPosition.bottom + deltaY\n      this.rawLeft = mouseClickPosition.left - deltaX\n      this.rawRight = mouseClickPosition.right + deltaX\n\n      this.$emit('dragging', this.left, this.top)\n    },\n    handleMove (e) {\n      const handle = this.handle\n      const mouseClickPosition = this.mouseClickPosition\n\n      const tmpDeltaX = mouseClickPosition.mouseX - (e.touches ? e.touches[0].pageX : e.pageX)\n      const tmpDeltaY = mouseClickPosition.mouseY - (e.touches ? e.touches[0].pageY : e.pageY)\n\n      const [deltaX, deltaY] = this.snapToGrid(this.grid, tmpDeltaX, tmpDeltaY)\n\n      if (!deltaX && !deltaY) return\n\n      if (handle.includes('b')) {\n        this.rawBottom = mouseClickPosition.bottom + deltaY\n      } else if (handle.includes('t')) {\n        this.rawTop = mouseClickPosition.top - deltaY\n      }\n\n      if (handle.includes('r')) {\n        this.rawRight = mouseClickPosition.right + deltaX\n      } else if (handle.includes('l')) {\n        this.rawLeft = mouseClickPosition.left - deltaX\n      }\n\n      this.$emit('resizing', this.left, this.top, this.width, this.height)\n    },\n    handleUp (e) {\n      this.handle = null\n\n      this.resetBoundsAndMouseState()\n\n      this.rawTop = this.top\n      this.rawBottom = this.bottom\n      this.rawLeft = this.left\n      this.rawRight = this.right\n\n      if (this.resizing) {\n        this.resizing = false\n        this.$emit('resizestop', this.left, this.top, this.width, this.height)\n      }\n      if (this.dragging) {\n        this.dragging = false\n        this.$emit('dragstop', this.left, this.top)\n      }\n\n      removeEvent(document.documentElement, eventsFor.move, this.handleMove)\n    },\n    snapToGrid (grid, pendingX, pendingY) {\n      const x = Math.round(pendingX / grid[0]) * grid[0]\n      const y = Math.round(pendingY / grid[1]) * grid[1]\n\n      return [x, y]\n    }\n  },\n  computed: {\n    style () {\n      return {\n        position: 'absolute',\n        top: this.top + 'px',\n        left: this.left + 'px',\n        width: this.width + 'px',\n        height: this.height + 'px',\n        zIndex: this.zIndex,\n        ...(this.dragging && this.disableUserSelect ? userSelectNone : userSelectAuto)\n      }\n    },\n    actualHandles () {\n      if (!this.resizable) return []\n\n      return this.handles\n    },\n    width () {\n      return this.parentWidth - this.left - this.right\n    },\n    height () {\n      return this.parentHeight - this.top - this.bottom\n    },\n    resizingOnX () {\n      return (Boolean(this.handle) && (this.handle.includes('l') || this.handle.includes('r')))\n    },\n    resizingOnY () {\n      return (Boolean(this.handle) && (this.handle.includes('t') || this.handle.includes('b')))\n    },\n    isCornerHandle () {\n      return (Boolean(this.handle) && ['tl', 'tr', 'br', 'bl'].includes(this.handle))\n    }\n  },\n\n  watch: {\n    active (val) {\n      this.enabled = val\n\n      if (val) {\n        this.$emit('activated')\n      } else {\n        this.$emit('deactivated')\n      }\n    },\n    z (val) {\n      if (val >= 0 || val === 'auto') {\n        this.zIndex = val\n      }\n    },\n    rawLeft (newLeft) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const left = this.left\n      const top = this.top\n\n      if (bounds.minLeft !== null && newLeft < bounds.minLeft) {\n        newLeft = bounds.minLeft\n      } else if (bounds.maxLeft !== null && bounds.maxLeft < newLeft) {\n        newLeft = bounds.maxLeft\n      }\n\n      if (lockAspectRatio && this.resizingOnX) {\n        this.rawTop = top - (left - newLeft) / aspectFactor\n      }\n\n      this.left = newLeft\n    },\n    rawRight (newRight) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const right = this.right\n      const bottom = this.bottom\n\n      if (bounds.minRight !== null && newRight < bounds.minRight) {\n        newRight = bounds.minRight\n      } else if (bounds.maxRight !== null && bounds.maxRight < newRight) {\n        newRight = bounds.maxRight\n      }\n\n      if (lockAspectRatio && this.resizingOnX) {\n        this.rawBottom = bottom - (right - newRight) / aspectFactor\n      }\n\n      this.right = newRight\n    },\n    rawTop (newTop) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const left = this.left\n      const top = this.top\n\n      if (bounds.minTop !== null && newTop < bounds.minTop) {\n        newTop = bounds.minTop\n      } else if (bounds.maxTop !== null && bounds.maxTop < newTop) {\n        newTop = bounds.maxTop\n      }\n\n      if (lockAspectRatio && this.resizingOnY) {\n        this.rawLeft = left - (top - newTop) * aspectFactor\n      }\n\n      this.top = newTop\n    },\n    rawBottom (newBottom) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const right = this.right\n      const bottom = this.bottom\n\n      if (bounds.minBottom !== null && newBottom < bounds.minBottom) {\n        newBottom = bounds.minBottom\n      } else if (bounds.maxBottom !== null && bounds.maxBottom < newBottom) {\n        newBottom = bounds.maxBottom\n      }\n\n      if (lockAspectRatio && this.resizingOnY) {\n        this.rawRight = right - (bottom - newBottom) * aspectFactor\n      }\n\n      this.bottom = newBottom\n    },\n    x () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcDragLimits()\n      }\n\n      const delta = this.x - this.left\n\n      if (delta % this.grid[0] === 0) {\n        this.rawLeft = this.x\n        this.rawRight = this.right - delta\n      }\n    },\n    y () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcDragLimits()\n      }\n\n      const delta = this.y - this.top\n\n      if (delta % this.grid[1] === 0) {\n        this.rawTop = this.y\n        this.rawBottom = this.bottom - delta\n      }\n    },\n    lockAspectRatio (val) {\n      if (val) {\n        this.aspectFactor = this.width / this.height\n      } else {\n        this.aspectFactor = undefined\n      }\n    },\n    minWidth (val) {\n      if (val > 0 && val <= this.width) {\n        this.minW = val\n      }\n    },\n    minHeight (val) {\n      if (val > 0 && val <= this.height) {\n        this.minH = val\n      }\n    },\n    maxWidth (val) {\n      this.maxW = val\n    },\n    maxHeight (val) {\n      this.maxH = val\n    },\n    w () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcResizeLimits()\n      }\n\n      const delta = this.width - this.w\n\n      if (delta % this.grid[0] === 0) {\n        this.rawRight = this.right + delta\n      }\n    },\n    h () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcResizeLimits()\n      }\n\n      const delta = this.height - this.h\n\n      if (delta % this.grid[1] === 0) {\n        this.rawBottom = this.bottom + delta\n      }\n    }\n  }\n}\n",{"version":3,"sources":["drag-resize-forvue.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"drag-resize-forvue.vue","sourceRoot":"src\\components","sourcesContent":["<template>\n  <div\n    :style=\"style\"\n    :class=\"[{\n      [classNameActive]: enabled,\n      [classNameDragging]: dragging,\n      [classNameResizing]: resizing,\n      [classNameDraggable]: draggable,\n      [classNameResizable]: resizable\n    }, className]\"\n    @contextmenu=\"contextmenu\"\n    @mousedown=\"elementDown\"\n    @touchstart=\"elementTouchDown\"\n  >\n    <div\n      v-for=\"handle in actualHandles\"\n      :key=\"handle\"\n      :class=\"[classNameHandle, classNameHandle + '-' + handle]\"\n      :style=\"{display: enabled ? 'block' : 'none'}\"\n      @mousedown.stop.prevent=\"handleDown(handle, $event)\"\n      @touchstart.stop.prevent=\"handleTouchDown(handle, $event)\"\n    >\n      <slot :name=\"handle\"></slot>\n    </div>\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport { matchesSelectorToParentElements, addEvent, removeEvent } from '../utils/dom'\n\nconst events = {\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup'\n  },\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend'\n  }\n}\n\nconst userSelectNone = {\n  userSelect: 'none',\n  MozUserSelect: 'none',\n  WebkitUserSelect: 'none',\n  MsUserSelect: 'none'\n}\n\nconst userSelectAuto = {\n  userSelect: 'auto',\n  MozUserSelect: 'auto',\n  WebkitUserSelect: 'auto',\n  MsUserSelect: 'auto'\n}\n\nlet eventsFor = events.mouse\n\nexport default {\n  replace: true,\n  name: 'vue-draggable-resizable',\n  props: {\n    className: {\n      type: String,\n      default: 'vdr'\n    },\n    classNameDraggable: {\n      type: String,\n      default: 'draggable'\n    },\n    classNameResizable: {\n      type: String,\n      default: 'resizable'\n    },\n    classNameDragging: {\n      type: String,\n      default: 'dragging'\n    },\n    classNameResizing: {\n      type: String,\n      default: 'resizing'\n    },\n    classNameActive: {\n      type: String,\n      default: 'active'\n    },\n    classNameHandle: {\n      type: String,\n      default: 'handle'\n    },\n    disableUserSelect: {\n      type: Boolean,\n      default: true\n    },\n    enableNativeDrag: {\n      type: Boolean,\n      default: false\n    },\n    preventDeactivation: {\n      type: Boolean,\n      default: false\n    },\n    active: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: true\n    },\n    resizable: {\n      type: Boolean,\n      default: true\n    },\n    lockAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    w: {\n      type: Number,\n      default: 200,\n      validator: (val) => val > 0\n    },\n    h: {\n      type: Number,\n      default: 200,\n      validator: (val) => val > 0\n    },\n    minWidth: {\n      type: Number,\n      default: 0,\n      validator: (val) => val >= 0\n    },\n    minHeight: {\n      type: Number,\n      default: 0,\n      validator: (val) => val >= 0\n    },\n    maxWidth: {\n      type: Number,\n      default: null,\n      validator: (val) => val >= 0\n    },\n    maxHeight: {\n      type: Number,\n      default: null,\n      validator: (val) => val >= 0\n    },\n    x: {\n      type: Number,\n      default: 0,\n      validator: (val) => typeof val === 'number'\n    },\n    y: {\n      type: Number,\n      default: 0,\n      validator: (val) => typeof val === 'number'\n    },\n    z: {\n      type: [String, Number],\n      default: 'auto',\n      validator: (val) => (typeof val === 'string' ? val === 'auto' : val >= 0)\n    },\n    handles: {\n      type: Array,\n      default: () => ['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml'],\n      validator: (val) => {\n        const s = new Set(['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml'])\n\n        return new Set(val.filter(h => s.has(h))).size === val.length\n      }\n    },\n    dragHandle: {\n      type: String,\n      default: null\n    },\n    dragCancel: {\n      type: String,\n      default: null\n    },\n    axis: {\n      type: String,\n      default: 'both',\n      validator: (val) => ['x', 'y', 'both'].includes(val)\n    },\n    grid: {\n      type: Array,\n      default: () => [1, 1]\n    },\n    parent: {\n      type: Boolean,\n      default: false\n    },\n    onDragStart: {\n      type: Function,\n      default: null\n    },\n    onResizeStart: {\n      type: Function,\n      default: null\n    }\n  },\n\n  data: function () {\n    return {\n      rawWidth: this.w,\n      rawHeight: this.h,\n      rawLeft: this.x,\n      rawTop: this.y,\n      rawRight: null,\n      rawBottom: null,\n\n      left: this.x,\n      top: this.y,\n      right: null,\n      bottom: null,\n\n      aspectFactor: this.w / this.h,\n\n      parentWidth: null,\n      parentHeight: null,\n\n      minW: this.minWidth,\n      minH: this.minHeight,\n\n      maxW: this.maxWidth,\n      maxH: this.maxHeight,\n\n      handle: null,\n      enabled: this.active,\n      resizing: false,\n      dragging: false,\n      zIndex: this.z\n    }\n  },\n\n  created: function () {\n    // eslint-disable-next-line\n    if (this.maxWidth && this.minWidth > this.maxWidth) console.warn('[Vdr warn]: Invalid prop: minWidth cannot be greater than maxWidth')\n    // eslint-disable-next-line\n    if (this.maxWidth && this.minHeight > this.maxHeight) console.warn('[Vdr warn]: Invalid prop: minHeight cannot be greater than maxHeight')\n\n    this.resetBoundsAndMouseState()\n  },\n  mounted: function () {\n    if (!this.enableNativeDrag) {\n      this.$el.ondragstart = () => false\n    }\n\n    [this.parentWidth, this.parentHeight] = this.getParentSize()\n\n    this.rawRight = this.parentWidth - this.rawWidth - this.rawLeft\n    this.rawBottom = this.parentHeight - this.rawHeight - this.rawTop\n\n    addEvent(document.documentElement, 'mousedown', this.deselect)\n    addEvent(document.documentElement, 'touchend touchcancel', this.deselect)\n\n    addEvent(window, 'resize', this.checkParentSize)\n  },\n  beforeDestroy: function () {\n    removeEvent(document.documentElement, 'mousedown', this.deselect)\n    removeEvent(document.documentElement, 'touchstart', this.handleUp)\n    removeEvent(document.documentElement, 'mousemove', this.move)\n    removeEvent(document.documentElement, 'touchmove', this.move)\n    removeEvent(document.documentElement, 'mouseup', this.handleUp)\n    removeEvent(document.documentElement, 'touchend touchcancel', this.deselect)\n\n    removeEvent(window, 'resize', this.checkParentSize)\n  },\n\n  methods: {\n    resetBoundsAndMouseState () {\n      this.mouseClickPosition = { mouseX: 0, mouseY: 0, x: 0, y: 0, w: 0, h: 0 }\n\n      this.bounds = {\n        minLeft: null,\n        maxLeft: null,\n        minRight: null,\n        maxRight: null,\n        minTop: null,\n        maxTop: null,\n        minBottom: null,\n        maxBottom: null\n      }\n    },\n    checkParentSize () {\n      if (this.parent) {\n        const [newParentWidth, newParentHeight] = this.getParentSize()\n\n        const deltaX = this.parentWidth - newParentWidth\n        const deltaY = this.parentHeight - newParentHeight\n\n        this.rawRight -= deltaX\n        this.rawBottom -= deltaY\n\n        this.parentWidth = newParentWidth\n        this.parentHeight = newParentHeight\n      }\n    },\n    getParentSize () {\n      if (this.parent) {\n        const style = window.getComputedStyle(this.$el.parentNode, null)\n\n        return [\n          parseInt(style.getPropertyValue('width'), 10),\n          parseInt(style.getPropertyValue('height'), 10)\n        ]\n      }\n\n      return [null, null]\n    },\n    elementTouchDown (e) {\n      eventsFor = events.touch\n      this.elementDown(e)\n    },\n    contextmenu (e) {\n      this.$emit('onDelete')\n      e.preventDefault()\n    },\n    elementDown (e) {\n      if (e.button === 2) {\n        return\n      }\n      const target = e.target || e.srcElement\n\n      if (this.$el.contains(target)) {\n        if (this.onDragStart && this.onDragStart(e) === false) {\n          return\n        }\n\n        if (\n          (this.dragHandle && !matchesSelectorToParentElements(target, this.dragHandle, this.$el)) ||\n          (this.dragCancel && matchesSelectorToParentElements(target, this.dragCancel, this.$el))\n        ) {\n          return\n        }\n\n        if (!this.enabled) {\n          this.enabled = true\n\n          this.$emit('activated')\n          this.$emit('update:active', true)\n        }\n\n        if (this.draggable) {\n          this.dragging = true\n        }\n\n        this.mouseClickPosition.mouseX = e.touches ? e.touches[0].pageX : e.pageX\n        this.mouseClickPosition.mouseY = e.touches ? e.touches[0].pageY : e.pageY\n\n        this.mouseClickPosition.left = this.left\n        this.mouseClickPosition.right = this.right\n        this.mouseClickPosition.top = this.top\n        this.mouseClickPosition.bottom = this.bottom\n\n        if (this.parent) {\n          this.bounds = this.calcDragLimits()\n        }\n\n        addEvent(document.documentElement, eventsFor.move, this.move)\n        addEvent(document.documentElement, eventsFor.stop, this.handleUp)\n      }\n    },\n    calcDragLimits () {\n      return {\n        minLeft: (this.parentWidth + this.left) % this.grid[0],\n        maxLeft: Math.floor((this.parentWidth - this.width - this.left) / this.grid[0]) * this.grid[0] + this.left,\n        minRight: (this.parentWidth + this.right) % this.grid[0],\n        maxRight: Math.floor((this.parentWidth - this.width - this.right) / this.grid[0]) * this.grid[0] + this.right,\n        minTop: (this.parentHeight + this.top) % this.grid[1],\n        maxTop: Math.floor((this.parentHeight - this.height - this.top) / this.grid[1]) * this.grid[1] + this.top,\n        minBottom: (this.parentHeight + this.bottom) % this.grid[1],\n        maxBottom: Math.floor((this.parentHeight - this.height - this.bottom) / this.grid[1]) * this.grid[1] + this.bottom\n      }\n    },\n    deselect (e) {\n      const target = e.target || e.srcElement\n      const regex = new RegExp(this.className + '-([trmbl]{2})', '')\n\n      if (!this.$el.contains(target) && !regex.test(target.className)) {\n        if (this.enabled && !this.preventDeactivation) {\n          this.enabled = false\n\n          this.$emit('deactivated')\n          this.$emit('update:active', false)\n        }\n\n        removeEvent(document.documentElement, eventsFor.move, this.handleMove)\n      }\n\n      this.resetBoundsAndMouseState()\n    },\n    handleTouchDown (handle, e) {\n      eventsFor = events.touch\n\n      this.handleDown(handle, e)\n    },\n    handleDown (handle, e) {\n      if (this.onResizeStart && this.onResizeStart(handle, e) === false) {\n        return\n      }\n\n      if (e.stopPropagation) e.stopPropagation()\n\n      // Here we avoid a dangerous recursion by faking\n      // corner handles as middle handles\n      if (this.lockAspectRatio && !handle.includes('m')) {\n        this.handle = 'm' + handle.substring(1)\n      } else {\n        this.handle = handle\n      }\n\n      this.resizing = true\n\n      this.mouseClickPosition.mouseX = e.touches ? e.touches[0].pageX : e.pageX\n      this.mouseClickPosition.mouseY = e.touches ? e.touches[0].pageY : e.pageY\n      this.mouseClickPosition.left = this.left\n      this.mouseClickPosition.right = this.right\n      this.mouseClickPosition.top = this.top\n      this.mouseClickPosition.bottom = this.bottom\n\n      this.bounds = this.calcResizeLimits()\n\n      addEvent(document.documentElement, eventsFor.move, this.handleMove)\n      addEvent(document.documentElement, eventsFor.stop, this.handleUp)\n    },\n    calcResizeLimits () {\n      let minW = this.minW\n      let minH = this.minH\n      let maxW = this.maxW\n      let maxH = this.maxH\n\n      const aspectFactor = this.aspectFactor\n      const [gridX, gridY] = this.grid\n      const width = this.width\n      const height = this.height\n      const left = this.left\n      const top = this.top\n      const right = this.right\n      const bottom = this.bottom\n\n      if (this.lockAspectRatio) {\n        if (minW / minH > aspectFactor) {\n          minH = minW / aspectFactor\n        } else {\n          minW = aspectFactor * minH\n        }\n\n        if (maxW && maxH) {\n          maxW = Math.min(maxW, aspectFactor * maxH)\n          maxH = Math.min(maxH, maxW / aspectFactor)\n        } else if (maxW) {\n          maxH = maxW / aspectFactor\n        } else if (maxH) {\n          maxW = aspectFactor * maxH\n        }\n      }\n\n      maxW = maxW - (maxW % gridX)\n      maxH = maxH - (maxH % gridY)\n\n      const limits = {\n        minLeft: null,\n        maxLeft: null,\n        minTop: null,\n        maxTop: null,\n        minRight: null,\n        maxRight: null,\n        minBottom: null,\n        maxBottom: null\n      }\n\n      if (this.parent) {\n        limits.minLeft = (this.parentWidth + left) % gridX\n        limits.maxLeft = left + Math.floor((width - minW) / gridX) * gridX\n        limits.minTop = (this.parentHeight + top) % gridY\n        limits.maxTop = top + Math.floor((height - minH) / gridY) * gridY\n        limits.minRight = (this.parentWidth + right) % gridX\n        limits.maxRight = right + Math.floor((width - minW) / gridX) * gridX\n        limits.minBottom = (this.parentHeight + bottom) % gridY\n        limits.maxBottom = bottom + Math.floor((height - minH) / gridY) * gridY\n\n        if (maxW) {\n          limits.minLeft = Math.max(limits.minLeft, this.parentWidth - right - maxW)\n          limits.minRight = Math.max(limits.minRight, this.parentWidth - left - maxW)\n        }\n\n        if (maxH) {\n          limits.minTop = Math.max(limits.minTop, this.parentHeight - bottom - maxH)\n          limits.minBottom = Math.max(limits.minBottom, this.parentHeight - top - maxH)\n        }\n\n        if (this.lockAspectRatio) {\n          limits.minLeft = Math.max(limits.minLeft, left - top * aspectFactor)\n          limits.minTop = Math.max(limits.minTop, top - left / aspectFactor)\n          limits.minRight = Math.max(limits.minRight, right - bottom * aspectFactor)\n          limits.minBottom = Math.max(limits.minBottom, bottom - right / aspectFactor)\n        }\n      } else {\n        limits.minLeft = null\n        limits.maxLeft = left + Math.floor((width - minW) / gridX) * gridX\n        limits.minTop = null\n        limits.maxTop = top + Math.floor((height - minH) / gridY) * gridY\n        limits.minRight = null\n        limits.maxRight = right + Math.floor((width - minW) / gridX) * gridX\n        limits.minBottom = null\n        limits.maxBottom = bottom + Math.floor((height - minH) / gridY) * gridY\n\n        if (maxW) {\n          limits.minLeft = -(right + maxW)\n          limits.minRight = -(left + maxW)\n        }\n\n        if (maxH) {\n          limits.minTop = -(bottom + maxH)\n          limits.minBottom = -(top + maxH)\n        }\n\n        if (this.lockAspectRatio && (maxW && maxH)) {\n          limits.minLeft = Math.min(limits.minLeft, -(right + maxW))\n          limits.minTop = Math.min(limits.minTop, -(maxH + bottom))\n          limits.minRight = Math.min(limits.minRight, -left - maxW)\n          limits.minBottom = Math.min(limits.minBottom, -top - maxH)\n        }\n      }\n\n      return limits\n    },\n    move (e) {\n      if (this.resizing) {\n        this.handleMove(e)\n      } else if (this.dragging) {\n        this.elementMove(e)\n      }\n    },\n    elementMove (e) {\n      const axis = this.axis\n      const grid = this.grid\n      const mouseClickPosition = this.mouseClickPosition\n\n      const tmpDeltaX = axis && axis !== 'y' ? mouseClickPosition.mouseX - (e.touches ? e.touches[0].pageX : e.pageX) : 0\n      const tmpDeltaY = axis && axis !== 'x' ? mouseClickPosition.mouseY - (e.touches ? e.touches[0].pageY : e.pageY) : 0\n\n      const [deltaX, deltaY] = this.snapToGrid(this.grid, tmpDeltaX, tmpDeltaY)\n\n      if (!deltaX && !deltaY) return\n\n      this.rawTop = mouseClickPosition.top - deltaY\n      this.rawBottom = mouseClickPosition.bottom + deltaY\n      this.rawLeft = mouseClickPosition.left - deltaX\n      this.rawRight = mouseClickPosition.right + deltaX\n\n      this.$emit('dragging', this.left, this.top)\n    },\n    handleMove (e) {\n      const handle = this.handle\n      const mouseClickPosition = this.mouseClickPosition\n\n      const tmpDeltaX = mouseClickPosition.mouseX - (e.touches ? e.touches[0].pageX : e.pageX)\n      const tmpDeltaY = mouseClickPosition.mouseY - (e.touches ? e.touches[0].pageY : e.pageY)\n\n      const [deltaX, deltaY] = this.snapToGrid(this.grid, tmpDeltaX, tmpDeltaY)\n\n      if (!deltaX && !deltaY) return\n\n      if (handle.includes('b')) {\n        this.rawBottom = mouseClickPosition.bottom + deltaY\n      } else if (handle.includes('t')) {\n        this.rawTop = mouseClickPosition.top - deltaY\n      }\n\n      if (handle.includes('r')) {\n        this.rawRight = mouseClickPosition.right + deltaX\n      } else if (handle.includes('l')) {\n        this.rawLeft = mouseClickPosition.left - deltaX\n      }\n\n      this.$emit('resizing', this.left, this.top, this.width, this.height)\n    },\n    handleUp (e) {\n      this.handle = null\n\n      this.resetBoundsAndMouseState()\n\n      this.rawTop = this.top\n      this.rawBottom = this.bottom\n      this.rawLeft = this.left\n      this.rawRight = this.right\n\n      if (this.resizing) {\n        this.resizing = false\n        this.$emit('resizestop', this.left, this.top, this.width, this.height)\n      }\n      if (this.dragging) {\n        this.dragging = false\n        this.$emit('dragstop', this.left, this.top)\n      }\n\n      removeEvent(document.documentElement, eventsFor.move, this.handleMove)\n    },\n    snapToGrid (grid, pendingX, pendingY) {\n      const x = Math.round(pendingX / grid[0]) * grid[0]\n      const y = Math.round(pendingY / grid[1]) * grid[1]\n\n      return [x, y]\n    }\n  },\n  computed: {\n    style () {\n      return {\n        position: 'absolute',\n        top: this.top + 'px',\n        left: this.left + 'px',\n        width: this.width + 'px',\n        height: this.height + 'px',\n        zIndex: this.zIndex,\n        ...(this.dragging && this.disableUserSelect ? userSelectNone : userSelectAuto)\n      }\n    },\n    actualHandles () {\n      if (!this.resizable) return []\n\n      return this.handles\n    },\n    width () {\n      return this.parentWidth - this.left - this.right\n    },\n    height () {\n      return this.parentHeight - this.top - this.bottom\n    },\n    resizingOnX () {\n      return (Boolean(this.handle) && (this.handle.includes('l') || this.handle.includes('r')))\n    },\n    resizingOnY () {\n      return (Boolean(this.handle) && (this.handle.includes('t') || this.handle.includes('b')))\n    },\n    isCornerHandle () {\n      return (Boolean(this.handle) && ['tl', 'tr', 'br', 'bl'].includes(this.handle))\n    }\n  },\n\n  watch: {\n    active (val) {\n      this.enabled = val\n\n      if (val) {\n        this.$emit('activated')\n      } else {\n        this.$emit('deactivated')\n      }\n    },\n    z (val) {\n      if (val >= 0 || val === 'auto') {\n        this.zIndex = val\n      }\n    },\n    rawLeft (newLeft) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const left = this.left\n      const top = this.top\n\n      if (bounds.minLeft !== null && newLeft < bounds.minLeft) {\n        newLeft = bounds.minLeft\n      } else if (bounds.maxLeft !== null && bounds.maxLeft < newLeft) {\n        newLeft = bounds.maxLeft\n      }\n\n      if (lockAspectRatio && this.resizingOnX) {\n        this.rawTop = top - (left - newLeft) / aspectFactor\n      }\n\n      this.left = newLeft\n    },\n    rawRight (newRight) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const right = this.right\n      const bottom = this.bottom\n\n      if (bounds.minRight !== null && newRight < bounds.minRight) {\n        newRight = bounds.minRight\n      } else if (bounds.maxRight !== null && bounds.maxRight < newRight) {\n        newRight = bounds.maxRight\n      }\n\n      if (lockAspectRatio && this.resizingOnX) {\n        this.rawBottom = bottom - (right - newRight) / aspectFactor\n      }\n\n      this.right = newRight\n    },\n    rawTop (newTop) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const left = this.left\n      const top = this.top\n\n      if (bounds.minTop !== null && newTop < bounds.minTop) {\n        newTop = bounds.minTop\n      } else if (bounds.maxTop !== null && bounds.maxTop < newTop) {\n        newTop = bounds.maxTop\n      }\n\n      if (lockAspectRatio && this.resizingOnY) {\n        this.rawLeft = left - (top - newTop) * aspectFactor\n      }\n\n      this.top = newTop\n    },\n    rawBottom (newBottom) {\n      const bounds = this.bounds\n      const aspectFactor = this.aspectFactor\n      const lockAspectRatio = this.lockAspectRatio\n      const right = this.right\n      const bottom = this.bottom\n\n      if (bounds.minBottom !== null && newBottom < bounds.minBottom) {\n        newBottom = bounds.minBottom\n      } else if (bounds.maxBottom !== null && bounds.maxBottom < newBottom) {\n        newBottom = bounds.maxBottom\n      }\n\n      if (lockAspectRatio && this.resizingOnY) {\n        this.rawRight = right - (bottom - newBottom) * aspectFactor\n      }\n\n      this.bottom = newBottom\n    },\n    x () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcDragLimits()\n      }\n\n      const delta = this.x - this.left\n\n      if (delta % this.grid[0] === 0) {\n        this.rawLeft = this.x\n        this.rawRight = this.right - delta\n      }\n    },\n    y () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcDragLimits()\n      }\n\n      const delta = this.y - this.top\n\n      if (delta % this.grid[1] === 0) {\n        this.rawTop = this.y\n        this.rawBottom = this.bottom - delta\n      }\n    },\n    lockAspectRatio (val) {\n      if (val) {\n        this.aspectFactor = this.width / this.height\n      } else {\n        this.aspectFactor = undefined\n      }\n    },\n    minWidth (val) {\n      if (val > 0 && val <= this.width) {\n        this.minW = val\n      }\n    },\n    minHeight (val) {\n      if (val > 0 && val <= this.height) {\n        this.minH = val\n      }\n    },\n    maxWidth (val) {\n      this.maxW = val\n    },\n    maxHeight (val) {\n      this.maxH = val\n    },\n    w () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcResizeLimits()\n      }\n\n      const delta = this.width - this.w\n\n      if (delta % this.grid[0] === 0) {\n        this.rawRight = this.right + delta\n      }\n    },\n    h () {\n      if (this.resizing || this.dragging) {\n        return\n      }\n\n      if (this.parent) {\n        this.bounds = this.calcResizeLimits()\n      }\n\n      const delta = this.height - this.h\n\n      if (delta % this.grid[1] === 0) {\n        this.rawBottom = this.bottom + delta\n      }\n    }\n  }\n}\n</script>\n"]}]}